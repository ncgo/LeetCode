class Solution {
public:
    struct TrieNode{
        TrieNode *children[26] = {NULL};
        string word = "";
    };
    
    TrieNode* build(vector<string> words) {
        TrieNode *root = new TrieNode;
        for(int i=0; i<words.size(); i++) {
            TrieNode* curr = root;
            for(int j=0; j<words[i].length(); j++) {
                if(curr->children[words[i][j] - 'a'] == NULL) curr->children[words[i][j] - 'a'] = new TrieNode;
                curr = curr -> children[words[i][j] - 'a'];
            }
        }
        return root;
    }
    
    void search(vector<vector<char>>& board, TrieNode* r, vector<string> ans, int i, int j) {
        if(board[i][j] == '*' || r->children[board[i][j] - 'a'] == NULL) return;
        char c = board[i][j];
        r=r->children[c - 'a'];
        if(r->word != "") {
            ans.push_back(r->word);
            r->word = "";
        }
        board[i][j] = '*';
        if(i > 0) search(board, r, ans, i-1, j);
        if(i < board.size() - 1) search(board, r, ans, i+1, j);
        if(j > 0) search(board, r, ans, i, j-1);
        if(j < board[0].size() - 1)search(board, r, ans, i, j+1);
        board[i][j] = c;
    }
    
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        TrieNode* root = build(words);
        vector<string> ans;
        for(int i = 0; i < board.size(); i++) {
            for(int j = 0; j < board[0].size(); j++) {
                search(board, root, ans, i, j);
            }
        }
        return ans;
    }
};
